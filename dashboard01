<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Dashboard - Tabs & Dark/Light Mode</title>
  <style>
    /* Dark Mode Variables (Default) */
    :root {
      --bg-color: #121212;
      --card-bg: #1e1e1e;
      --text-color: #e0e0e0;
      --accent-color: #03dac6;
      --accent-hover: #029e89;
      --shadow-color: rgba(0, 0, 0, 0.7);
    }
    /* Light Mode Overrides */
    .light-mode {
      --bg-color: #f2f2f2;
      --card-bg: #ffffff;
      --text-color: #333333;
      --accent-color: #007BFF;
      --accent-hover: #0056b3;
      --shadow-color: rgba(0, 0, 0, 0.15);
    }
    
    /* Global Styles */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      background-color: var(--bg-color);
      color: var(--text-color);
      font-family: Arial, sans-serif;
      padding: 20px;
      transition: background-color 0.3s, color 0.3s;
    }
    h1 {
      margin-bottom: 20px;
      font-size: 2em;
      text-align: left;
    }
    h2 {
      margin-bottom: 10px;
      font-size: 1.5em;
      border-bottom: 2px solid #444;
      padding-bottom: 5px;
    }
    h3 {
      margin: 10px 0 5px;
      font-size: 1.2em;
    }
    a {
      color: var(--accent-color);
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    ul {
      list-style: none;
      padding-left: 0;
    }
    li {
      margin-bottom: 5px;
    }
    /* Ticket status styles */
    .ticket-open {
      color: #ff5252;
    }
    .ticket-closed {
      color: #4caf50;
    }
    /* Button Styles */
    .btn {
      padding: 8px 12px;
      font-size: 0.9em;
      color: var(--bg-color);
      background-color: var(--accent-color);
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s;
      margin-top: 10px;
    }
    .btn:hover {
      background-color: var(--accent-hover);
    }
    /* Mode Toggle Button positioned at top right */
    #modeToggle {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 100;
    }
    /* Dashboard Grid: 6 Cards (3 columns per row) */
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
      margin-top: 60px;
    }
    @media (max-width: 900px) {
      .dashboard-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }
    @media (max-width: 600px) {
      .dashboard-grid {
        grid-template-columns: 1fr;
      }
    }
    /* Card Styles */
    .card {
      background-color: var(--card-bg);
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 5px var(--shadow-color);
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 4px 10px var(--shadow-color);
    }
    /* Profile & Advisor Styles */
    .profile, .advisor-profile {
      display: flex;
      align-items: center;
      gap: 20px;
    }
    .profile-avatar {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      background-color: var(--bg-color);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 3.8em;
      color: var(--text-color);
      flex-shrink: 0;
      margin: 5% 0px;
    }
    .profile-info h3,
    .advisor-info h3 {
      margin-bottom: 5px;
    }
    .profile-info p,
    .advisor-info p {
      font-size: 0.9em;
      margin-bottom: 3px;
    }
    .advisor-avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
    }
    /* Chart Container Styles */
    .chart-container {
      margin-top: 20px;
      height: 200px;
    }
    /* Tab Interface Styles */
    .tabs {
      display: flex;
      border-bottom: 1px solid #444;
      margin-bottom: 10px;
    }
    .tab-button {
      background: none;
      border: none;
      padding: 10px 15px;
      cursor: pointer;
      color: var(--text-color);
      font-size: 1em;
    }
    .tab-button.active {
      border-bottom: 2px solid var(--accent-color);
      font-weight: bold;
    }
    .tab-content {
      /* By default, display block for the active one; hidden ones use inline style */
    }
    .lrgTxt {
        font-size: 2.5em;
    }
    .bulletList {
        list-style-type: disc;
        padding-left: 10px;
        margin-left: 8px;
    }
    .flexH {
        display: flex;
    }
    .flexH li {
        display: grid;
        width: -webkit-fill-available;
        align-items: center;
        text-align: center;
        background-color: var(--bg-color);
        color: var(--text-color);
        margin: 3px;
        border-radius: 6px;
        padding: 15px;
    }
  </style>
</head>
<body>
  <!-- Dark/Light Mode Toggle Button -->
  <button id="modeToggle" class="btn">Switch to Light Mode</button>
  <h1>Dashboard</h1>
  <div class="dashboard-grid">
    
    <!-- Container 1: User Profile -->
    <div class="card">
    
        <div class="profile">
          <div class="profile-avatar">
            <!-- User initials will be inserted dynamically -->
          </div>
          <div class="profile-info">
            <h3 class="lrgTxt">John Doe</h3>
            <p><strong>Role:</strong> Product Owner</p>
            <p><strong>Team:</strong> Alpha Team</p>
            <p><strong>Cost Center:</strong> CC-12345</p>
          </div>
        </div>
      </div>
    
    <!-- Container 2: Advisor Information -->
    <div class="card">
      <h2>Alpha Team Advisor</h2>
      <div class="advisor-profile">
        <img class="advisor-avatar" src="https://via.placeholder.com/80" alt="Advisor Avatar" />
        <div class="advisor-info">
          <p><strong>Name:</strong> Jane Smith</p>
          <p><strong>Email:</strong> <a href="mailto:jane.smith@example.com">jane.smith@example.com</a></p>
          <p><strong>Teams:</strong> <a href="https://teams.microsoft.com" target="_blank">Microsoft Teams</a></p>
          <p><strong>Zoom:</strong> <a href="https://zoom.us" target="_blank">Zoom Meeting</a></p>
          <p><strong>Office Hours:</strong> Mon–Fri, 9:00 AM–5:00 PM</p>
        </div>
      </div>
    </div>
    
    <!-- Container 3: Role-Related Task -->
    <div class="card">
      <h2>Product Owner Task</h2>
      <p><strong>Task:</strong> Update Product Roadmap</p>
      <p><strong>Document Request:</strong> <a href="#" target="_blank">Download Document</a></p>
      <p><strong>Related:</strong> Review Q2 Roadmap Updates</p>
    </div>
    
    <!-- Container 4: Defect Dashboard Glance with Tabs -->
    <div class="card">
      <h2>Defect Dashboard Glance</h2>
      <div class="tabs">
        <button class="tab-button active" data-tab="defect-overview">Overview</button>
        <button class="tab-button" data-tab="defect-chart">Visualization</button>
      </div>
      <div class="tab-content" id="defect-overview">
        <ul class="flexH">
          <li><strong>Open:</strong> 5</li>
          <li><strong>In Progress:</strong> 3</li>
          <li><strong>Closed:</strong> 12</li>
        </ul>
      </div>
      <div class="tab-content" id="defect-chart" style="display: none;">
        <div class="chart-container">
          <canvas id="defectChart"></canvas>
        </div>
      </div>
    </div>
    
    <!-- Container 5: Related Jira Tickets -->
    <div class="card">
      <h2>Related Jira Tickets</h2>
      <p><strong>Total Tickets:</strong> 3 (Open: 2, Closed: 1)</p>
      <ul class="bulletList">
        <li>JIRA-101 <span class="ticket-open">(Open)</span></li>
        <li>JIRA-102 <span class="ticket-closed">(Closed)</span></li>
        <li>JIRA-103 <span class="ticket-open">(Open)</span></li>
      </ul>
    </div>
    
    <!-- Container 6: Training & Resources with Tabs -->
    <div class="card">
      <h2>Training &amp; Resources</h2>
      <div class="tabs">
        <button class="tab-button active" data-tab="training-details">Details</button>
        <button class="tab-button" data-tab="training-journey">Learning Journey</button>
      </div>
      <div class="tab-content" id="training-details">
        <h3>Completed Trainings</h3>
        <ul class="bulletList">
          <li>Agile Fundamentals</li>
          <li>Product Management 101</li>
        </ul>
        <h3>Recommended Trainings</h3>
        <ul class="bulletList">
          <li>Advanced Product Strategy</li>
          <li>Stakeholder Management</li>
        </ul>
        <h3>Recommended Resources</h3>
        <ul class="bulletList">
          <li><a href="#" target="_blank">Guide to Product Roadmaps</a></li>
          <li><a href="#" target="_blank">Market Analysis Toolkit</a></li>
        </ul>
      </div>
      <div class="tab-content" id="training-journey" style="display: none;">
        <div class="chart-container">
          <canvas id="trainingChart"></canvas>
        </div>
      </div>
    </div>
    
  </div>
  
  <!-- Include Chart.js Library -->
  <!-- Include Chart.js Library -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Global variables to hold chart instances
  window.defectChart = null;
  window.trainingChart = null;

  /* DARK/LIGHT MODE TOGGLE WITH CHART REINITIALIZATION */
  const modeToggleBtn = document.getElementById('modeToggle');
  modeToggleBtn.addEventListener('click', function() {
    document.body.classList.toggle('light-mode');
    this.textContent = document.body.classList.contains('light-mode')
                       ? "Switch to Dark Mode"
                       : "Switch to Light Mode";

    // If a chart exists, destroy and then reinitialize it if its tab is active
    if (window.defectChart) {
      window.defectChart.destroy();
      window.defectChart = null;
      // Check if the Defect Chart tab is currently visible
      if (document.getElementById('defect-chart').style.display === "block") {
        initializeDefectChart();
      }
    }
    if (window.trainingChart) {
      window.trainingChart.destroy();
      window.trainingChart = null;
      // Check if the Training Chart tab is currently visible
      if (document.getElementById('training-journey').style.display === "block") {
        initializeTrainingChart();
      }
    }
  });

  /* DYNAMICALLY SET USER INITIALS ON THE PROFILE AVATAR */
  document.addEventListener("DOMContentLoaded", function() {
    const profileNameEl = document.querySelector('.profile-info h3');
    if (profileNameEl) {
      const fullName = profileNameEl.textContent.trim();
      const initials = fullName.split(" ").map(name => name[0]).join("");
      document.querySelector('.profile-avatar').textContent = initials;
    }
  });

  /* Helper Function: Initialize the Defect Chart */
  function initializeDefectChart() {
    const ctx = document.getElementById("defectChart").getContext("2d");
    window.defectChart = new Chart(ctx, {
      type: "doughnut",
      data: {
        labels: ["Open", "In Progress", "Closed"],
        datasets: [{
          data: [5, 3, 12],
          backgroundColor: [
            "rgba(255, 99, 132, 0.7)",
            "rgba(54, 162, 235, 0.7)",
            "rgba(75, 192, 192, 0.7)"
          ]
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          title: {
            display: true,
            text: "Defect Status Overview",
            color: getComputedStyle(document.body).getPropertyValue('--text-color')
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || "";
                const value = context.parsed || 0;
                let related = "";
                if (label === "Open") {
                  related = "Related issue: SC123";
                } else if (label === "In Progress") {
                  related = "Related issue: SC234";
                } else if (label === "Closed") {
                  related = "Related issue: SC453";
                }
                return label + ": " + value + " (" + related + ")";
              }
            }
          },
          legend: {
            labels: {
              color: getComputedStyle(document.body).getPropertyValue('--text-color')
            }
          }
        }
      }
    });
  }

  const trainingDetails = {
    "Foundational": { completed: ["Agile Fundamentals", "Intro to Agile"], pending: ["Basics of Scrum"] },
    "Intermediate": { completed: ["Product Management 101"], pending: ["Advanced Stakeholder Management"] },
    "Advanced": { completed: [], pending: ["Advanced Product Strategy"] }
  };

  /* Helper Function: Initialize the Training Chart */
  function initializeTrainingChart() {
    const ctx = document.getElementById("trainingChart").getContext("2d");
    window.trainingChart = new Chart(ctx, {
      type: "bar",
      data: {
        labels: ["Foundational", "Intermediate", "Advanced"],
        datasets: [
          {
            label: "Completed",
            data: [2, 1, 0],
            backgroundColor: "rgba(76,175,80,0.7)"
          },
          {
            label: "Pending",
            data: [1, 1, 1],
            backgroundColor: "rgba(255,152,0,0.7)"
          }
        ]
      },
      options: {
        indexAxis: 'y',
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            stacked: true,
            ticks: { color: getComputedStyle(document.body).getPropertyValue('--text-color') },
            grid: { color: "rgba(255,255,255,0.1)" }
          },
          y: {
            stacked: true,
            ticks: { color: getComputedStyle(document.body).getPropertyValue('--text-color') },
            grid: { display: false }
          }
        },
        plugins: {
          title: {
            display: true,
            text: "Learning Journey",
            color: getComputedStyle(document.body).getPropertyValue('--text-color')
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const category = context.chart.data.labels[context.dataIndex];
                const datasetLabel = context.dataset.label;
                if (datasetLabel === "Completed") {
                  return "Completed: " + (trainingDetails[category].completed.join(", ") || "None");
                } else {
                  return "Pending: " + (trainingDetails[category].pending.join(", ") || "None");
                }
              }
            }
          },
          legend: {
            labels: {
              color: getComputedStyle(document.body).getPropertyValue('--text-color')
            }
          }
        }
      }
    });
  }

  /* TAB INTERFACE FUNCTIONALITY */
  document.querySelectorAll('.tabs').forEach(tabsContainer => {
    const tabButtons = tabsContainer.querySelectorAll('.tab-button');
    tabButtons.forEach(btn => {
      btn.addEventListener('click', function() {
        // Remove "active" from all sibling buttons
        tabButtons.forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        const selectedTab = this.getAttribute('data-tab');
        const card = tabsContainer.parentElement;
        // Show/hide the tab-content elements within this card
        card.querySelectorAll('.tab-content').forEach(content => {
          content.style.display = (content.id === selectedTab) ? "block" : "none";
        });
        // Initialize charts if their tab is selected and not already initialized
        if (selectedTab === 'defect-chart' && !window.defectChart) {
          initializeDefectChart();
        }
        if (selectedTab === 'training-journey' && !window.trainingChart) {
          initializeTrainingChart();
        }
      });
    });
  });
</script>


</body>
</html>
