<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PDF Accessibility Evaluator Pre-Prompt Generator</title>
  <style>
    :root {
      --primary-color: #4a6fa5;
      --secondary-color: #6c757d;
      --success-color: #28a745;
      --light-color: #f8f9fa;
      --dark-color: #343a40;
      --highlight-color: #e9ecef;
      --info-color: #17a2b8;
      --warning-color: #ffc107;
      --error-color: #dc3545;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      line-height: 1.6;
      color: var(--dark-color);
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    
    header {
      text-align: center;
      margin-bottom: 30px;
    }
    
    h1 {
      color: var(--primary-color);
    }
    
    .container {
      background-color: var(--light-color);
      border-radius: 8px;
      padding: 25px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .step {
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 25px;
      border-left: 5px solid var(--primary-color);
      background-color: white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
    }
    
    .step-number {
      display: inline-block;
      width: 30px;
      height: 30px;
      background-color: var(--primary-color);
      color: white;
      border-radius: 50%;
      text-align: center;
      line-height: 30px;
      margin-right: 10px;
      font-weight: bold;
    }
    
    .step-title {
      display: inline-block;
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 15px;
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
    }
    
    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 16px;
      transition: border-color 0.3s;
    }
    
    input[type="text"]:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 3px rgba(74, 111, 165, 0.1);
    }
    
    .drop-area {
      border: 2px dashed #ced4da;
      border-radius: 4px;
      padding: 20px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s;
      margin-top: 15px;
      position: relative;
    }
    
    .drop-area.highlight {
      border-color: var(--primary-color);
      background-color: rgba(74, 111, 165, 0.1);
    }
    
    .drop-area.error {
      border-color: var(--error-color);
      background-color: rgba(220, 53, 69, 0.1);
    }
    
    .drop-area p {
      margin: 0;
    }
    
    .file-info {
      margin-top: 10px;
      font-style: italic;
      color: var(--secondary-color);
    }
    
    .file-error {
      margin-top: 10px;
      color: var(--error-color);
      font-weight: bold;
    }
    
    .button-wrapper {
      text-align: center;
      margin: 20px 0;
    }
    
    button {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 16px;
      cursor: pointer;
      border-radius: 4px;
      transition: all 0.3s;
      font-weight: 500;
    }
    
    button:hover {
      background-color: #3a5a8c;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    button:active {
      transform: translateY(0);
    }
    
    .generate-btn {
      background-color: var(--success-color);
      font-size: 18px;
    }
    
    .generate-btn:hover {
      background-color: #218838;
    }
    
    .output-container {
      margin-top: 30px;
    }
    
    .output-area {
      background-color: white;
      border: 1px solid #ced4da;
      border-radius: 4px;
      padding: 15px;
      min-height: 200px;
      margin-bottom: 15px;
      white-space: pre-wrap;
      max-height: 400px;
      overflow-y: auto;
    }
    
    .copy-btn {
      background-color: var(--secondary-color);
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }
    
    .copy-btn:hover {
      background-color: #5a6268;
    }
    
    .success-message {
      color: var(--success-color);
      display: none;
      margin-left: 10px;
      font-weight: 500;
    }
    
    .icon {
      display: inline-block;
      width: 20px;
      height: 20px;
      vertical-align: middle;
    }
    
    .step-active {
      border-left-color: var(--success-color);
      background-color: var(--highlight-color);
    }
    
    .post-instructions {
      display: none;
      background-color: #d1ecf1;
      border-color: #bee5eb;
      border-radius: 4px;
      color: var(--info-color);
      padding: 15px;
      margin-top: 20px;
      border-left: 5px solid var(--info-color);
    }
    
    .post-instructions h4 {
      color: var(--info-color);
      margin-top: 0;
    }
    
    .post-instructions ol {
      margin-bottom: 0;
      padding-left: 20px;
    }
    
    .step {
      opacity: 0.7;
      transition: opacity 0.3s ease;
    }
    
    .step-active {
      opacity: 1;
    }
    
    .step-4 {
      border-left-color: var(--info-color);
      background-color: #d1ecf1;
    }
    
    .reference-note {
      background-color: #fff3cd;
      border: 1px solid #ffeeba;
      border-left: 4px solid var(--warning-color);
      padding: 15px;
      margin: 20px 0;
      border-radius: 4px;
    }
    
    .reference-content {
      background-color: #f8f9fa;
      border: 1px solid #ced4da;
      border-radius: 4px;
      padding: 15px;
      margin-top: 15px;
      font-family: monospace;
      font-size: 14px;
      max-height: 200px;
      overflow-y: auto;
    }
    
    .toggle-btn {
      background-color: var(--info-color);
      padding: 8px 15px;
      font-size: 14px;
      margin-top: 10px;
    }
    
    .toggle-btn:hover {
      background-color: #138496;
    }
    
    .hidden {
      display: none;
    }
  </style>
</head>
<body>
  <header>
    <h1>PDF Accessibility Evaluator</h1>
    <p>Generate a detailed accessibility evaluation pre-prompt</p>
  </header>

  <div class="container">
    <div class="step" id="step1">
      <div class="step-number">1</div>
      <span class="step-title">Enter PDF Document Information</span>
      
      <div class="form-group">
        <label for="pdfName">PDF Document Name:</label>
        <input type="text" id="pdfName" placeholder="Enter the name of the PDF document">
      </div>
      
      <div class="form-group">
        <div id="dropArea" class="drop-area">
          <p>Drag & drop a PDF file here or <span style="color: var(--primary-color);">click to browse</span></p>
          <input type="file" id="fileInput" accept=".pdf" style="display: none;">
          <div id="fileInfo" class="file-info"></div>
          <div id="fileError" class="file-error hidden"></div>
        </div>
      </div>
    </div>
    
    <div class="step" id="step2">
      <div class="step-number">2</div>
      <span class="step-title">Generate Evaluation Pre-Prompt</span>
      
      <div class="button-wrapper">
        <button id="generateBtn" class="generate-btn">
          <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M12 2v4M12 18v4M4.93 4.93l2.83 2.83M16.24 16.24l2.83 2.83M2 12h4M18 12h4M4.93 19.07l2.83-2.83M16.24 7.76l2.83-2.83"/>
          </svg>
          Generate Pre-Prompt
        </button>
      </div>
    </div>
    
    <div class="step" id="step3">
      <div class="step-number">3</div>
      <span class="step-title">Copy Generated Pre-Prompt</span>
      
      <div class="output-container">
        <div id="outputArea" class="output-area"></div>
        <div class="button-wrapper">
          <button id="copyBtn" class="copy-btn">
            <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
              <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"></path>
            </svg>
            Copy to Clipboard
          </button>
          <span id="copySuccess" class="success-message">âœ“ Copied successfully!</span>
        </div>
        
        <div id="postInstructions" class="post-instructions">
          <h4>What to do next:</h4>
          <ol>
            <li>Upload your PDF document to your AI assistant</li>
            <li>Paste the copied pre-prompt into the conversation</li>
            <li>Wait for the assistant to generate a comprehensive accessibility evaluation</li>
          </ol>
        </div>
      </div>
    </div>
    
    <div class="step step-4" id="step4" style="display: none;">
      <div class="step-number">4</div>
      <span class="step-title">Use the Pre-Prompt with AI Assistant</span>
      
      <div class="form-group">
        <p>Your pre-prompt has been copied to clipboard. Follow these steps to get your PDF accessibility evaluation:</p>
        <ol>
          <li><strong>Go to the LLM</strong></li>
          <li><strong>Upload your PDF:</strong> Upload your PDF file for evaluation</li>
          <li><strong>Paste the pre-prompt:</strong> Paste the copied pre-prompt into the conversation</li>
        </ol>
        <p>The evaluation will include numbered issues, WCAG violations, and a detailed validation assessment table.</p>
      </div>
    </div>

  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Elements from the original script
      const step1 = document.getElementById('step1');
      const step2 = document.getElementById('step2');
      const step3 = document.getElementById('step3');
      const step4 = document.getElementById('step4');
      const pdfNameInput = document.getElementById('pdfName');
      const dropArea = document.getElementById('dropArea');
      const fileInput = document.getElementById('fileInput');
      const fileInfo = document.getElementById('fileInfo');
      const fileError = document.getElementById('fileError');
      const generateBtn = document.getElementById('generateBtn');
      const outputArea = document.getElementById('outputArea');
      const copyBtn = document.getElementById('copyBtn');
      const copySuccess = document.getElementById('copySuccess');
      const postInstructions = document.getElementById('postInstructions');
      const toggleReferenceBtn = document.getElementById('toggleReferenceBtn');
      const referenceContent = document.getElementById('referenceContent');
  
      // WCAG PDF techniques reference content (as in the original)
      const wcagReferenceContent = `# PDF Accessibility Techniques Reference
  # Based on WCAG 2.0 PDF Techniques
  
  ## Document Structure Techniques
  PDF1: Apply text alternatives to images with the Alt entry in PDF documents
  PDF2: Create bookmarks in PDF documents
  PDF3: Ensure correct tab and reading order in PDF documents
  PDF4: Hide decorative images with the Artifact tag in PDF documents
  PDF5: Provide headings by using PDF tags
  PDF6: Use table elements for table markup in PDF documents
  PDF7: Perform OCR on scanned documents to provide actual text
  PDF8: Provide definitions for abbreviations via expansion text
  PDF9: Provide headings by marking content with heading tags
  PDF10: Provide labels for interactive form controls in PDF documents
  PDF11: Provide links and link text using the /Link structure element
  PDF12: Provide name, role, value information for form fields
  PDF13: Provide replacement text using the /Alt entry for links
  PDF14: Providing running headers and footers in PDF documents
  PDF15: Providing submit buttons with the submit-form action in PDF forms
  PDF16: Setting the default language using the /Lang entry in the document catalog
  
  ## Text Alternatives
  PDF1: Apply text alternatives to images
  PDF4: Hide decorative images as artifacts
  PDF13: Provide replacement text for links
  
  ## Time-based Media Techniques
  - Provide text transcripts for audio/video content
  - Include captions for multimedia
  
  ## Adaptable Content
  PDF3: Ensure correct tab and reading order
  PDF5: Provide headings by using PDF tags
  PDF6: Use table elements for table markup
  PDF9: Provide headings by marking content with heading tags
  PDF14: Providing running headers and footers
  PDF17: Specifying consistent page numbering for PDF documents
  PDF20: Using Adobe Acrobat Pro's Table Editor to repair mistagged tables
  
  ## Distinguishable Content
  PDF7: Perform OCR on scanned documents to provide actual text
  PDF23: Providing interactive form controls in PDF documents
  PDF24: Providing spacing between lines and paragraphs
  PDF25: Specifying expansion text for abbreviations
  PDF26: Providing metadata using the PDF /Info dictionary
  
  ## Keyboard Accessible
  PDF3: Ensure correct tab and reading order
  PDF10: Provide labels for interactive form controls
  PDF11: Provide links and link text using /Link
  PDF23: Providing interactive form controls
  
  ## Enough Time
  PDF15: Providing submit buttons with the submit-form action
  PDF22: Indicating required form controls in PDF forms
  
  ## Seizures and Physical Reactions
  - Avoid content that flashes more than three times per second
  
  ## Navigable
  PDF2: Create bookmarks
  PDF9: Provide headings
  PDF11: Provide links and link text
  PDF13: Provide replacement text for links
  PDF17: Specifying consistent page numbering
  PDF18: Specifying the document title using the Title entry in the document information dictionary
  PDF19: Specifying the language for a passage or phrase
  
  ## Readable
  PDF8: Provide definitions for abbreviations
  PDF16: Setting the default language
  PDF19: Specifying the language for a passage or phrase
  PDF25: Specifying expansion text for abbreviations
  
  ## Predictable
  PDF14: Providing running headers and footers
  PDF17: Specifying consistent page numbering
  
  ## Input Assistance
  PDF10: Provide labels for interactive form controls
  PDF12: Provide name, role, value information for form fields
  PDF15: Providing submit buttons with the submit-form action
  PDF22: Indicating required form controls
  
  ## Compatible
  PDF1-PDF32: All techniques aim to improve compatibility
  
  ## Common Accessibility Issues in PDFs
  1. Missing document structure tags
  2. Missing alternative text for images
  3. Improper heading structure
  4. Improperly tagged tables
  5. Inaccessible form fields
  6. Missing document language specification
  7. Untagged text rendered as images
  8. Poor color contrast
  9. Missing bookmarks for navigation
  10. Missing document title
  11. Improper reading order
  12. Improperly tagged links
  13. No keyboard accessibility for interactive elements
  14. Missing metadata
  15. Security settings that prohibit accessibility`;
  
      // Set the reference content if applicable
      if (referenceContent) {
        referenceContent.textContent = wcagReferenceContent;
      }
  
      // Initially activate step 1
      step1.classList.add('step-active');
  
      // Toggle reference content (if the toggle button exists)
      if (toggleReferenceBtn && referenceContent) {
        toggleReferenceBtn.addEventListener('click', () => {
          referenceContent.classList.toggle('hidden');
          toggleReferenceBtn.textContent = referenceContent.classList.contains('hidden') 
            ? 'Show WCAG PDF Reference Content' 
            : 'Hide WCAG PDF Reference Content';
        });
      }
  
      // --- PDF Upload Functionality (Proven Version) ---
      let selectedFile = null;
  
      // Set up drag and drop event listeners
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
      });
  
      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }
  
      ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false);
      });
  
      ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false);
      });
  
      // Handle file drop
      dropArea.addEventListener('drop', handleDrop, false);
  
      function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        handleFiles(files);
      }
  
      // Handle file selection via click
      dropArea.addEventListener('click', () => {
        fileInput.click();
      });
  
      fileInput.addEventListener('change', () => {
        handleFiles(fileInput.files);
      });
  
      function handleFiles(files) {
        if (files.length > 0) {
          const file = files[0];
          if (file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf')) {
            selectedFile = file;
            pdfNameInput.value = file.name;
            fileInfo.textContent = `Selected file: ${file.name} (${formatFileSize(file.size)})`;
            // Activate step 2 when a valid file is selected
            step1.classList.add('step-active');
            step2.classList.add('step-active');
            step2.scrollIntoView({ behavior: 'smooth' });
          } else {
            fileError.textContent = 'Error: Please select a PDF file only.';
            fileError.classList.remove('hidden');
            dropArea.classList.add('error');
            fileInfo.textContent = '';
            selectedFile = null;
          }
        }
      }
  
      function formatFileSize(bytes) {
        if (bytes < 1024) return bytes + ' bytes';
        else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
        else return (bytes / 1048576).toFixed(1) + ' MB';
      }
  
      // When the PDF name input is modified, activate step 2 accordingly
      pdfNameInput.addEventListener('input', () => {
        if (pdfNameInput.value.trim()) {
          step2.classList.add('step-active');
        } else {
          step2.classList.remove('step-active');
        }
      });
  
      // --- Pre-Prompt Generation ---
      generateBtn.addEventListener('click', () => {
        const pdfName = pdfNameInput.value.trim();
        if (!pdfName) {
          alert('Please enter a PDF document name.');
          return;
        }
        const prePrompt = `Please analyze the attached PDF "${pdfName}" for accessibility issues according to W3C WCAG PDF techniques. Use the following reference information for your evaluation:
  
  ${wcagReferenceContent}
  
  Your evaluation must include:
  
  1. Numbered Issues List: Identify and number each specific accessibility problem found in the document.
     * For each issue, provide the exact location/reference in the PDF (page number, section, element)
     * Describe the accessibility barrier it creates for users with disabilities
     * Specify which WCAG 2.0 guideline it violates (e.g., 'WCAG 2.0 1.1.1: Non-text Content')
     * Provide detailed step-by-step remediation instructions that a PDF editor could follow
  
  2. Validation Assessment Table with the following columns:
     | # | Issue Description | Location | WCAG Violation | Severity (High/Medium/Low) | Remediation Steps |
     
  3. The evaluation should comprehensively cover:
     * Document structure and tags (headings, reading order, bookmarks)
     * Alternative text for images and graphics
     * Color contrast and use of color
     * Form fields and interactive elements
     * Tables structure and header cells
     * Language specification
     * Links and navigation
     * Text alternatives for non-text content
     * Document title and metadata
     * Security settings that might impact accessibility
  
  4. Forward-thinking suggestions that enhance overall accessibility beyond minimum compliance.
  
  Be technical, precise, and comprehensive in your analysis. Number each issue to make tracking and remediation easier. The evaluation should help document owners efficiently address all accessibility deficiencies.`;
  
        outputArea.textContent = prePrompt;
        step3.classList.add('step-active');
        step3.scrollIntoView({ behavior: 'smooth' });
      });
  
      // --- Copy to Clipboard ---
      copyBtn.addEventListener('click', () => {
        const text = outputArea.textContent;
        if (!text) return;
        navigator.clipboard.writeText(text).then(() => {
          copySuccess.style.display = 'inline';
          // Show post-instructions and step 4
          postInstructions.style.display = 'block';
          step4.style.display = 'block';
          step4.classList.add('step-active');
          setTimeout(() => {
            step4.scrollIntoView({ behavior: 'smooth' });
            setTimeout(() => {
              copySuccess.style.display = 'none';
            }, 2000);
          }, 300);
        }).catch(err => {
          console.error('Could not copy text: ', err);
        });
      });
    });
  </script>
  
</body>
</html>
